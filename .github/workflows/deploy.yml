name: Deploy Dioxus site to Multiple Platforms

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  ENV_VARS: ${{ vars.ENV_VARS }}

jobs:
  # Wait for assets build if in progress
  wait-for-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Check if assets workflow is running
        id: check
        run: |
          # Get workflow runs for build-assets.yml
          RUNNING=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?workflow_id=build-assets.yml&status=in_progress" | \
            jq '.total_count')
          
          echo "running_count=$RUNNING" >> $GITHUB_OUTPUT
          
          if [ "$RUNNING" -gt 0 ]; then
            echo "Assets workflow is currently running. Will wait for completion."
          else
            echo "No assets workflow in progress."
          fi

      - name: Wait for assets build workflow
        if: steps.check.outputs.running_count > 0
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: 'Build on ubuntu-latest'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped,cancelled

  # Build job
  build:
    needs: wait-for-assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry, git, and binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('.github/workflows/deploy.yml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-target-

      - name: Install cargo-binstall
        run: |
          if ! command -v cargo-binstall &> /dev/null; then
            cargo install cargo-binstall
          fi

      - name: Install Dioxus CLI binary
        run: |
          if ! command -v dx &> /dev/null; then
            cargo binstall dioxus-cli@0.7.0-alpha.3 --no-confirm
          fi

      - name: Build static site
        run: dx build --release

      - name: Get or build assets tool
        run: |
          mkdir -p ./bin
          
          # Try to download pre-built binary from latest release
          echo "Attempting to download pre-built assets binary..."
          
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases | \
            jq -r '.[] | select(.name | contains("Assets Binary")) | .tag_name' | \
            sort -V | tail -n 1)
          
          if [ -n "$LATEST_RELEASE" ]; then
            echo "Found release: $LATEST_RELEASE"
            
            # Download Linux binary
            if curl -f -L \
              "https://github.com/${{ github.repository }}/releases/download/$LATEST_RELEASE/assets-linux" \
              -o ./bin/assets 2>/dev/null; then
              chmod +x ./bin/assets
              echo "Successfully downloaded pre-built binary"
            else
              echo "Failed to download binary, will build from source"
              LATEST_RELEASE=""
            fi
          fi
          
          # Fall back to building from source if download failed
          if [ -z "$LATEST_RELEASE" ]; then
            echo "Building assets tool from source..."
            cargo build --release --bin assets
            cp target/release/assets ./bin/assets
            echo "Successfully built from source"
          fi

      - name: Copy favicon assets
        run: |
          echo "Running assets tool to copy favicons..."
          ./bin/assets
          
          # Verify the assets were copied
          if [ -d "target/dx/hmziq-xyz/release/web/public/assets/fav" ]; then
            echo "✅ Favicon assets successfully copied to build directory"
            ls -la target/dx/hmziq-xyz/release/web/public/assets/fav/
          else
            echo "❌ Error: Favicon assets directory not found after running assets tool"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dioxus-build
          path: ./target/dx/hmziq-xyz/release/web/public/

  # Deploy to GitHub Pages
  deploy-github-pages:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dioxus-build
          path: ./out

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Deploy to Cloudflare Pages
  deploy-cloudflare-pages:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dioxus-build
          path: ./out

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./out --project-name=hmziqxyz --branch=main

  # Deploy to Firebase Hosting
  deploy-firebase-hosting:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dioxus-build
          path: ./out

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_HMZIQ_XYZ }}
          channelId: live
          projectId: hmziq-xyz
